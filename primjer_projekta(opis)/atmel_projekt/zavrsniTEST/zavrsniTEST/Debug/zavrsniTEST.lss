
zavrsniTEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000080e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  0000080e  00000882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015f4  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a45  00000000  00000000  00002074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b73  00000000  00000000  00002ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000358  00000000  00000000  0000362c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000503  00000000  00000000  00003984  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e9d  00000000  00000000  00003e87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00004d24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_1>
   8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_2>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3d       	cpi	r26, 0xD0	; 208
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  7a:	0c 94 05 04 	jmp	0x80a	; 0x80a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <detectReaderVersion>:
}

// Detects and prints(sends through UART) reader version
void detectReaderVersion() {
	//check version of the reader
	uint8_t byte = mfrc522_read(VersionReg);
  82:	87 e3       	ldi	r24, 0x37	; 55
  84:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
	
	if (byte == 0x92) {
  88:	82 39       	cpi	r24, 0x92	; 146
  8a:	49 f4       	brne	.+18     	; 0x9e <detectReaderVersion+0x1c>
		usart_puts("Reader detected ");
  8c:	80 e6       	ldi	r24, 0x60	; 96
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	0e 94 9d 03 	call	0x73a	; 0x73a <usart_puts>
		usart_puts("MIFARE RC522 v2\n");
  94:	81 e7       	ldi	r24, 0x71	; 113
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 9d 03 	call	0x73a	; 0x73a <usart_puts>
  9c:	08 95       	ret

	} else if (byte == 0x91 || byte==0x90) {
  9e:	80 59       	subi	r24, 0x90	; 144
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	48 f4       	brcc	.+18     	; 0xb6 <detectReaderVersion+0x34>
		usart_puts("Reader detected ");
  a4:	80 e6       	ldi	r24, 0x60	; 96
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 9d 03 	call	0x73a	; 0x73a <usart_puts>
		usart_puts("MIFARE RC522v1\n");
  ac:	82 e8       	ldi	r24, 0x82	; 130
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 9d 03 	call	0x73a	; 0x73a <usart_puts>
  b4:	08 95       	ret
	} else {
		usart_puts("No reader found\n");
  b6:	82 e9       	ldi	r24, 0x92	; 146
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 9d 03 	call	0x73a	; 0x73a <usart_puts>
  be:	08 95       	ret

000000c0 <main>:

void buzzerOn(uint16_t time);
void detectReaderVersion();


int main(void) {
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	60 97       	sbiw	r28, 0x10	; 16
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
	
	BUZZER_DDR = 0xff;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	8a bb       	out	0x1a, r24	; 26
	BUZZER_PORT = ~_BV(0);
  d8:	8e ef       	ldi	r24, 0xFE	; 254
  da:	8b bb       	out	0x1b, r24	; 27
	
	// enable interrupts
	MCUCR = _BV(ISC01) | _BV(ISC11);
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	85 bf       	out	0x35, r24	; 53
	GICR = _BV(INT0) | _BV(INT1);
  e0:	80 ec       	ldi	r24, 0xC0	; 192
  e2:	8b bf       	out	0x3b, r24	; 59
	uint8_t status;
	
	uint8_t str[MAX_LEN];
	
	// initialize spr, uart and mfrc
	spi_init();
  e4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <spi_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	8f e7       	ldi	r24, 0x7F	; 127
  ec:	96 e1       	ldi	r25, 0x16	; 22
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x2e>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x38>
  f8:	00 00       	nop
	_delay_ms(1000);
	
	mfrc522_init();
  fa:	0e 94 9b 01 	call	0x336	; 0x336 <mfrc522_init>
  fe:	ef ef       	ldi	r30, 0xFF	; 255
 100:	ff e7       	ldi	r31, 0x7F	; 127
 102:	26 e1       	ldi	r18, 0x16	; 22
 104:	e1 50       	subi	r30, 0x01	; 1
 106:	f0 40       	sbci	r31, 0x00	; 0
 108:	20 40       	sbci	r18, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x44>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x4e>
 10e:	00 00       	nop
	_delay_ms(1000);
	
	usart_init(9600);
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	95 e2       	ldi	r25, 0x25	; 37
 114:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <usart_init>
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	9f e3       	ldi	r25, 0x3F	; 63
 11c:	eb e0       	ldi	r30, 0x0B	; 11
 11e:	81 50       	subi	r24, 0x01	; 1
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e0 40       	sbci	r30, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x5e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x68>
 128:	00 00       	nop
	_delay_ms(500);

	// enable interrupts
	sei();
 12a:	78 94       	sei
	
	detectReaderVersion();
 12c:	0e 94 41 00 	call	0x82	; 0x82 <detectReaderVersion>
 130:	ff ef       	ldi	r31, 0xFF	; 255
 132:	2f e7       	ldi	r18, 0x7F	; 127
 134:	83 e4       	ldi	r24, 0x43	; 67
 136:	f1 50       	subi	r31, 0x01	; 1
 138:	20 40       	sbci	r18, 0x00	; 0
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x76>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x80>
 140:	00 00       	nop
 142:	7e 01       	movw	r14, r28
 144:	96 e0       	ldi	r25, 0x06	; 6
 146:	e9 0e       	add	r14, r25
 148:	f1 1c       	adc	r15, r1
   
   
   char buffer[64];
	while(1){
		// request information about any tag in range of the antenna 
		status = mfrc522_request(PICC_REQALL,str);
 14a:	be 01       	movw	r22, r28
 14c:	6f 5f       	subi	r22, 0xFF	; 255
 14e:	7f 4f       	sbci	r23, 0xFF	; 255
 150:	82 e5       	ldi	r24, 0x52	; 82
 152:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <mfrc522_request>
 156:	18 2f       	mov	r17, r24
	   	usart_puts("Waiting...\n");
 158:	83 ea       	ldi	r24, 0xA3	; 163
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 9d 03 	call	0x73a	; 0x73a <usart_puts>
		   
		if(status == CARD_FOUND) {
 160:	11 30       	cpi	r17, 0x01	; 1
 162:	39 f5       	brne	.+78     	; 0x1b2 <main+0xf2>
		   // if card is found, try to fetch card id number
			status = mfrc522_get_card_serial(str);
 164:	ce 01       	movw	r24, r28
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	0e 94 24 03 	call	0x648	; 0x648 <mfrc522_get_card_serial>
			
			if(status == CARD_FOUND) {
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	a1 f4       	brne	.+40     	; 0x198 <main+0xd8>
				// send id number (as hex characters) through UART interface
				usart_puts(":");
 170:	8f ea       	ldi	r24, 0xAF	; 175
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 9d 03 	call	0x73a	; 0x73a <usart_puts>
 178:	8e 01       	movw	r16, r28
 17a:	0f 5f       	subi	r16, 0xFF	; 255
 17c:	1f 4f       	sbci	r17, 0xFF	; 255
				for(uint8_t i = 0; i < 5; ++i) {
					usart_hex(str[i]);
 17e:	f8 01       	movw	r30, r16
 180:	81 91       	ld	r24, Z+
 182:	8f 01       	movw	r16, r30
 184:	0e 94 ac 03 	call	0x758	; 0x758 <usart_hex>
			status = mfrc522_get_card_serial(str);
			
			if(status == CARD_FOUND) {
				// send id number (as hex characters) through UART interface
				usart_puts(":");
				for(uint8_t i = 0; i < 5; ++i) {
 188:	0e 15       	cp	r16, r14
 18a:	1f 05       	cpc	r17, r15
 18c:	c1 f7       	brne	.-16     	; 0x17e <main+0xbe>
					usart_hex(str[i]);
				}
				usart_puts("\n");
 18e:	86 ec       	ldi	r24, 0xC6	; 198
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 9d 03 	call	0x73a	; 0x73a <usart_puts>
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <main+0xe0>
		   }
		   else {
			 usart_puts("Error reading serial!\n");
 198:	81 eb       	ldi	r24, 0xB1	; 177
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 9d 03 	call	0x73a	; 0x73a <usart_puts>
 1a0:	ff ef       	ldi	r31, 0xFF	; 255
 1a2:	2f e3       	ldi	r18, 0x3F	; 63
 1a4:	88 e3       	ldi	r24, 0x38	; 56
 1a6:	f1 50       	subi	r31, 0x01	; 1
 1a8:	20 40       	sbci	r18, 0x00	; 0
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0xe6>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0xf0>
 1b0:	00 00       	nop
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	ef e7       	ldi	r30, 0x7F	; 127
 1b6:	f6 e1       	ldi	r31, 0x16	; 22
 1b8:	91 50       	subi	r25, 0x01	; 1
 1ba:	e0 40       	sbci	r30, 0x00	; 0
 1bc:	f0 40       	sbci	r31, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0xf8>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x102>
 1c2:	00 00       	nop
 1c4:	c2 cf       	rjmp	.-124    	; 0x14a <main+0x8a>

000001c6 <__vector_1>:
}

/* Interrupts INT0 and INT1 are used for changing privilege level
*	INT0 increment privilege, INT1 decrements privilege
*/
ISR(INT0_vect) {
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
	usart_puts(".+\n");
 1e8:	88 ec       	ldi	r24, 0xC8	; 200
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 9d 03 	call	0x73a	; 0x73a <usart_puts>
	debounce();
 1f0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <debounce>

}
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	7f 91       	pop	r23
 202:	6f 91       	pop	r22
 204:	5f 91       	pop	r21
 206:	4f 91       	pop	r20
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <__vector_2>:

ISR(INT1_vect) {
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
	usart_puts(".-\n");
 238:	8c ec       	ldi	r24, 0xCC	; 204
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 9d 03 	call	0x73a	; 0x73a <usart_puts>
	debounce();
 240:	0e 94 d7 03 	call	0x7ae	; 0x7ae <debounce>
}
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	7f 91       	pop	r23
 252:	6f 91       	pop	r22
 254:	5f 91       	pop	r21
 256:	4f 91       	pop	r20
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <buzzerOn>:

// Turns buzzer on for a specified amount of time
void buzzerOn(uint16_t time) {
	BUZZER_DDR = ~_BV(0);
 266:	2e ef       	ldi	r18, 0xFE	; 254
 268:	2a bb       	out	0x1a, r18	; 26
	delay(time);
 26a:	0e 94 c8 03 	call	0x790	; 0x790 <delay>
	BUZZER_DDR = 0xff;
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	8a bb       	out	0x1a, r24	; 26
 272:	08 95       	ret

00000274 <__vector_13>:
	}
}


ISR(USART_RXC_vect)
{
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	3f 93       	push	r19
 282:	4f 93       	push	r20
 284:	5f 93       	push	r21
 286:	6f 93       	push	r22
 288:	7f 93       	push	r23
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	af 93       	push	r26
 290:	bf 93       	push	r27
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
	char data;
	
	// read the data from the RX buffer
	data = UDR;
 296:	8c b1       	in	r24, 0x0c	; 12
	
	// 0 - unauthorized card
	// 1 - authorized card
	// using buzzer to inform a user
	switch (data) {
 298:	80 33       	cpi	r24, 0x30	; 48
 29a:	19 f0       	breq	.+6      	; 0x2a2 <__vector_13+0x2e>
 29c:	81 33       	cpi	r24, 0x31	; 49
 29e:	99 f0       	breq	.+38     	; 0x2c6 <__vector_13+0x52>
 2a0:	16 c0       	rjmp	.+44     	; 0x2ce <__vector_13+0x5a>
		case '0': 
			buzzerOn(250);
 2a2:	8a ef       	ldi	r24, 0xFA	; 250
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 33 01 	call	0x266	; 0x266 <buzzerOn>
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	8f e9       	ldi	r24, 0x9F	; 159
 2ae:	95 e0       	ldi	r25, 0x05	; 5
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <__vector_13+0x3c>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <__vector_13+0x46>
 2ba:	00 00       	nop
			_delay_ms(250);
			buzzerOn(250);
 2bc:	8a ef       	ldi	r24, 0xFA	; 250
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 33 01 	call	0x266	; 0x266 <buzzerOn>
			break;
 2c4:	04 c0       	rjmp	.+8      	; 0x2ce <__vector_13+0x5a>
		case '1':
			buzzerOn(500);
 2c6:	84 ef       	ldi	r24, 0xF4	; 244
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 33 01 	call	0x266	; 0x266 <buzzerOn>
			break;

	}
}
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 2f0:	cf 93       	push	r28
 2f2:	c6 2f       	mov	r28, r22
	SS_ENABLE();
 2f4:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f6:	96 ef       	ldi	r25, 0xF6	; 246
 2f8:	9a 95       	dec	r25
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <mfrc522_write+0x8>
	_delay_us(100);
	spi_transmit((reg<<1)&0x7E);
 2fc:	88 0f       	add	r24, r24
 2fe:	8e 77       	andi	r24, 0x7E	; 126
 300:	0e 94 65 03 	call	0x6ca	; 0x6ca <spi_transmit>
	spi_transmit(data);
 304:	8c 2f       	mov	r24, r28
 306:	0e 94 65 03 	call	0x6ca	; 0x6ca <spi_transmit>
	SS_DISABLE();
 30a:	c4 9a       	sbi	0x18, 4	; 24
}
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	SS_ENABLE();
 310:	c4 98       	cbi	0x18, 4	; 24
 312:	96 ef       	ldi	r25, 0xF6	; 246
 314:	9a 95       	dec	r25
 316:	f1 f7       	brne	.-4      	; 0x314 <mfrc522_read+0x4>
	_delay_us(100);
	spi_transmit(((reg<<1)&0x7E)|0x80);
 318:	88 0f       	add	r24, r24
 31a:	8e 77       	andi	r24, 0x7E	; 126
 31c:	80 68       	ori	r24, 0x80	; 128
 31e:	0e 94 65 03 	call	0x6ca	; 0x6ca <spi_transmit>
	data = spi_transmit(0x00);
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 65 03 	call	0x6ca	; 0x6ca <spi_transmit>
	SS_DISABLE();
 328:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
 32a:	08 95       	ret

0000032c <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 32c:	6f e0       	ldi	r22, 0x0F	; 15
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
 334:	08 95       	ret

00000336 <mfrc522_init>:


void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 336:	0e 94 96 01 	call	0x32c	; 0x32c <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 33a:	6d e8       	ldi	r22, 0x8D	; 141
 33c:	8a e2       	ldi	r24, 0x2A	; 42
 33e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 342:	6e e3       	ldi	r22, 0x3E	; 62
 344:	8b e2       	ldi	r24, 0x2B	; 43
 346:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 34a:	6e e1       	ldi	r22, 0x1E	; 30
 34c:	8c e2       	ldi	r24, 0x2C	; 44
 34e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	8d e2       	ldi	r24, 0x2D	; 45
 356:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 35a:	60 e4       	ldi	r22, 0x40	; 64
 35c:	85 e1       	ldi	r24, 0x15	; 21
 35e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 362:	6d e3       	ldi	r22, 0x3D	; 61
 364:	81 e1       	ldi	r24, 0x11	; 17
 366:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 36a:	84 e1       	ldi	r24, 0x14	; 20
 36c:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
	if(!(byte&0x03))
 370:	98 2f       	mov	r25, r24
 372:	93 70       	andi	r25, 0x03	; 3
 374:	29 f4       	brne	.+10     	; 0x380 <mfrc522_init+0x4a>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 376:	68 2f       	mov	r22, r24
 378:	63 60       	ori	r22, 0x03	; 3
 37a:	84 e1       	ldi	r24, 0x14	; 20
 37c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
 380:	08 95       	ret

00000382 <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 382:	3f 92       	push	r3
 384:	4f 92       	push	r4
 386:	5f 92       	push	r5
 388:	6f 92       	push	r6
 38a:	7f 92       	push	r7
 38c:	8f 92       	push	r8
 38e:	9f 92       	push	r9
 390:	af 92       	push	r10
 392:	bf 92       	push	r11
 394:	cf 92       	push	r12
 396:	df 92       	push	r13
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	98 2e       	mov	r9, r24
 3a6:	f6 2e       	mov	r15, r22
 3a8:	e7 2e       	mov	r14, r23
 3aa:	44 2e       	mov	r4, r20
 3ac:	82 2e       	mov	r8, r18
 3ae:	33 2e       	mov	r3, r19
 3b0:	58 01       	movw	r10, r16
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
 3b2:	8c e0       	ldi	r24, 0x0C	; 12
 3b4:	98 16       	cp	r9, r24
 3b6:	09 f4       	brne	.+2      	; 0x3ba <mfrc522_to_card+0x38>
 3b8:	c9 c0       	rjmp	.+402    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 3ba:	ee e0       	ldi	r30, 0x0E	; 14
 3bc:	9e 12       	cpse	r9, r30
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <mfrc522_to_card+0x44>
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 3c0:	10 e1       	ldi	r17, 0x10	; 16

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 3c2:	02 e1       	ldi	r16, 0x12	; 18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <mfrc522_to_card+0x48>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 3c6:	10 e0       	ldi	r17, 0x00	; 0
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 3c8:	00 e0       	ldi	r16, 0x00	; 0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 3ca:	84 e0       	ldi	r24, 0x04	; 4
 3cc:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 3d0:	68 2f       	mov	r22, r24
 3d2:	6f 77       	andi	r22, 0x7F	; 127
 3d4:	84 e0       	ldi	r24, 0x04	; 4
 3d6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 3da:	8a e0       	ldi	r24, 0x0A	; 10
 3dc:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 3e0:	68 2f       	mov	r22, r24
 3e2:	60 68       	ori	r22, 0x80	; 128
 3e4:	8a e0       	ldi	r24, 0x0A	; 10
 3e6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 3f2:	51 2c       	mov	r5, r1
 3f4:	61 2c       	mov	r6, r1
 3f6:	71 2c       	mov	r7, r1
 3f8:	41 14       	cp	r4, r1
 3fa:	51 04       	cpc	r5, r1
 3fc:	61 04       	cpc	r6, r1
 3fe:	71 04       	cpc	r7, r1
 400:	19 f4       	brne	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 402:	15 c0       	rjmp	.+42     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 404:	10 e3       	ldi	r17, 0x30	; 48
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 406:	07 e7       	ldi	r16, 0x77	; 119
 408:	cf 2d       	mov	r28, r15
 40a:	de 2d       	mov	r29, r14
 40c:	c1 2c       	mov	r12, r1
 40e:	d1 2c       	mov	r13, r1
 410:	76 01       	movw	r14, r12
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 412:	69 91       	ld	r22, Y+
 414:	89 e0       	ldi	r24, 0x09	; 9
 416:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 41a:	ff ef       	ldi	r31, 0xFF	; 255
 41c:	cf 1a       	sub	r12, r31
 41e:	df 0a       	sbc	r13, r31
 420:	ef 0a       	sbc	r14, r31
 422:	ff 0a       	sbc	r15, r31
 424:	c4 14       	cp	r12, r4
 426:	d5 04       	cpc	r13, r5
 428:	e6 04       	cpc	r14, r6
 42a:	f7 04       	cpc	r15, r7
 42c:	90 f3       	brcs	.-28     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 42e:	69 2d       	mov	r22, r9
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
    if (cmd == Transceive_CMD)
 436:	8c e0       	ldi	r24, 0x0C	; 12
 438:	98 12       	cpse	r9, r24
 43a:	08 c0       	rjmp	.+16     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
    {    
		n=mfrc522_read(BitFramingReg);
 43c:	8d e0       	ldi	r24, 0x0D	; 13
 43e:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 442:	68 2f       	mov	r22, r24
 444:	60 68       	ori	r22, 0x80	; 128
 446:	8d e0       	ldi	r24, 0x0D	; 13
 448:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 44c:	84 e0       	ldi	r24, 0x04	; 4
 44e:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
 452:	f8 2e       	mov	r15, r24
 454:	c0 e0       	ldi	r28, 0x00	; 0
 456:	d0 e0       	ldi	r29, 0x00	; 0
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 458:	11 60       	ori	r17, 0x01	; 1
 45a:	0a c0       	rjmp	.+20     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 45c:	84 e0       	ldi	r24, 0x04	; 4
 45e:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
 462:	f8 2e       	mov	r15, r24
 464:	21 96       	adiw	r28, 0x01	; 1
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 466:	cf 3c       	cpi	r28, 0xCF	; 207
 468:	e7 e0       	ldi	r30, 0x07	; 7
 46a:	de 07       	cpc	r29, r30
 46c:	09 f4       	brne	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46e:	8c c0       	rjmp	.+280    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 470:	81 2f       	mov	r24, r17
 472:	8f 21       	and	r24, r15
 474:	99 f3       	breq	.-26     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 476:	92 c0       	rjmp	.+292    	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 478:	01 70       	andi	r16, 0x01	; 1
 47a:	f0 22       	and	r15, r16
 47c:	11 f0       	breq	.+4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
            {   
				status = CARD_NOT_FOUND;			//??   
 47e:	c2 e0       	ldi	r28, 0x02	; 2
 480:	01 c0       	rjmp	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 482:	c1 e0       	ldi	r28, 0x01	; 1
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
			}

            if (cmd == Transceive_CMD)
 484:	fc e0       	ldi	r31, 0x0C	; 12
 486:	9f 12       	cpse	r9, r31
 488:	98 c0       	rjmp	.+304    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
            {
               	n = mfrc522_read(FIFOLevelReg);
 48a:	8a e0       	ldi	r24, 0x0A	; 10
 48c:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
 490:	48 2e       	mov	r4, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 492:	8c e0       	ldi	r24, 0x0C	; 12
 494:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
 498:	28 2f       	mov	r18, r24
 49a:	27 70       	andi	r18, 0x07	; 7
                if (lastBits)
 49c:	a9 f0       	breq	.+42     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 49e:	84 2d       	mov	r24, r4
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	82 0f       	add	r24, r18
 4b2:	91 1d       	adc	r25, r1
 4b4:	09 2e       	mov	r0, r25
 4b6:	00 0c       	add	r0, r0
 4b8:	aa 0b       	sbc	r26, r26
 4ba:	bb 0b       	sbc	r27, r27
 4bc:	f5 01       	movw	r30, r10
 4be:	80 83       	st	Z, r24
 4c0:	91 83       	std	Z+1, r25	; 0x01
 4c2:	a2 83       	std	Z+2, r26	; 0x02
 4c4:	b3 83       	std	Z+3, r27	; 0x03
 4c6:	11 c0       	rjmp	.+34     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
				}
                else
                {   
					*back_data_len = n*8;   
 4c8:	84 2d       	mov	r24, r4
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	09 2e       	mov	r0, r25
 4da:	00 0c       	add	r0, r0
 4dc:	aa 0b       	sbc	r26, r26
 4de:	bb 0b       	sbc	r27, r27
 4e0:	f5 01       	movw	r30, r10
 4e2:	80 83       	st	Z, r24
 4e4:	91 83       	std	Z+1, r25	; 0x01
 4e6:	a2 83       	std	Z+2, r26	; 0x02
 4e8:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
 4ea:	44 20       	and	r4, r4
 4ec:	71 f0       	breq	.+28     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 4ee:	84 2d       	mov	r24, r4
 4f0:	81 31       	cpi	r24, 0x11	; 17
 4f2:	08 f0       	brcs	.+2      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f4:	80 e1       	ldi	r24, 0x10	; 16
 4f6:	48 2e       	mov	r4, r24
 4f8:	51 2c       	mov	r5, r1
 4fa:	61 2c       	mov	r6, r1
 4fc:	71 2c       	mov	r7, r1
 4fe:	41 14       	cp	r4, r1
 500:	51 04       	cpc	r5, r1
 502:	61 04       	cpc	r6, r1
 504:	71 04       	cpc	r7, r1
 506:	29 f4       	brne	.+10     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 508:	58 c0       	rjmp	.+176    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 50a:	41 2c       	mov	r4, r1
 50c:	51 2c       	mov	r5, r1
 50e:	32 01       	movw	r6, r4
 510:	43 94       	inc	r4
 512:	08 2d       	mov	r16, r8
 514:	13 2d       	mov	r17, r3
 516:	c1 2c       	mov	r12, r1
 518:	d1 2c       	mov	r13, r1
 51a:	76 01       	movw	r14, r12
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 51c:	89 e0       	ldi	r24, 0x09	; 9
 51e:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
 522:	f8 01       	movw	r30, r16
 524:	81 93       	st	Z+, r24
 526:	8f 01       	movw	r16, r30
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 528:	ff ef       	ldi	r31, 0xFF	; 255
 52a:	cf 1a       	sub	r12, r31
 52c:	df 0a       	sbc	r13, r31
 52e:	ef 0a       	sbc	r14, r31
 530:	ff 0a       	sbc	r15, r31
 532:	c4 14       	cp	r12, r4
 534:	d5 04       	cpc	r13, r5
 536:	e6 04       	cpc	r14, r6
 538:	f7 04       	cpc	r15, r7
 53a:	80 f3       	brcs	.-32     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 53c:	3e c0       	rjmp	.+124    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 53e:	6c e0       	ldi	r22, 0x0C	; 12
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 546:	10 e3       	ldi	r17, 0x30	; 48
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 548:	07 e7       	ldi	r16, 0x77	; 119
 54a:	78 cf       	rjmp	.-272    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 54c:	84 e0       	ldi	r24, 0x04	; 4
 54e:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 552:	68 2f       	mov	r22, r24
 554:	6f 77       	andi	r22, 0x7F	; 127
 556:	84 e0       	ldi	r24, 0x04	; 4
 558:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 55c:	8a e0       	ldi	r24, 0x0A	; 10
 55e:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 562:	68 2f       	mov	r22, r24
 564:	60 68       	ori	r22, 0x80	; 128
 566:	8a e0       	ldi	r24, 0x0A	; 10
 568:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 574:	51 2c       	mov	r5, r1
 576:	61 2c       	mov	r6, r1
 578:	71 2c       	mov	r7, r1
 57a:	41 14       	cp	r4, r1
 57c:	51 04       	cpc	r5, r1
 57e:	61 04       	cpc	r6, r1
 580:	71 04       	cpc	r7, r1
 582:	09 f0       	breq	.+2      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 584:	3f cf       	rjmp	.-386    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 586:	db cf       	rjmp	.-74     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
        n = mfrc522_read(ComIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg);
 588:	8d e0       	ldi	r24, 0x0D	; 13
 58a:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 58e:	68 2f       	mov	r22, r24
 590:	6f 77       	andi	r22, 0x7F	; 127
 592:	8d e0       	ldi	r24, 0x0D	; 13
 594:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 598:	c3 e0       	ldi	r28, 0x03	; 3
 59a:	0f c0       	rjmp	.+30     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
        n = mfrc522_read(ComIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg);
 59c:	8d e0       	ldi	r24, 0x0D	; 13
 59e:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 5a2:	68 2f       	mov	r22, r24
 5a4:	6f 77       	andi	r22, 0x7F	; 127
 5a6:	8d e0       	ldi	r24, 0x0D	; 13
 5a8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 5ac:	86 e0       	ldi	r24, 0x06	; 6
 5ae:	0e 94 88 01 	call	0x310	; 0x310 <mfrc522_read>
 5b2:	8b 71       	andi	r24, 0x1B	; 27
 5b4:	09 f4       	brne	.+2      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5b6:	60 cf       	rjmp	.-320    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
				}
            }
        }
        else
        {   
			status = ERROR;  
 5b8:	c3 e0       	ldi	r28, 0x03	; 3
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 5ba:	8c 2f       	mov	r24, r28
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	ff 90       	pop	r15
 5c6:	ef 90       	pop	r14
 5c8:	df 90       	pop	r13
 5ca:	cf 90       	pop	r12
 5cc:	bf 90       	pop	r11
 5ce:	af 90       	pop	r10
 5d0:	9f 90       	pop	r9
 5d2:	8f 90       	pop	r8
 5d4:	7f 90       	pop	r7
 5d6:	6f 90       	pop	r6
 5d8:	5f 90       	pop	r5
 5da:	4f 90       	pop	r4
 5dc:	3f 90       	pop	r3
 5de:	08 95       	ret

000005e0 <mfrc522_request>:
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 5e0:	ef 92       	push	r14
 5e2:	ff 92       	push	r15
 5e4:	0f 93       	push	r16
 5e6:	1f 93       	push	r17
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	00 d0       	rcall	.+0      	; 0x5ee <mfrc522_request+0xe>
 5ee:	00 d0       	rcall	.+0      	; 0x5f0 <mfrc522_request+0x10>
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62
 5f4:	18 2f       	mov	r17, r24
 5f6:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07); //TxLastBists = BitFramingReg[2..0]	???
 5f8:	67 e0       	ldi	r22, 0x07	; 7
 5fa:	8d e0       	ldi	r24, 0x0D	; 13
 5fc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
	
	tag_type[0] = req_mode;
 600:	f7 01       	movw	r30, r14
 602:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 604:	8e 01       	movw	r16, r28
 606:	0f 5f       	subi	r16, 0xFF	; 255
 608:	1f 4f       	sbci	r17, 0xFF	; 255
 60a:	97 01       	movw	r18, r14
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	b7 01       	movw	r22, r14
 610:	8c e0       	ldi	r24, 0x0C	; 12
 612:	0e 94 c1 01 	call	0x382	; 0x382 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 616:	81 30       	cpi	r24, 0x01	; 1
 618:	59 f4       	brne	.+22     	; 0x630 <mfrc522_request+0x50>
 61a:	49 81       	ldd	r20, Y+1	; 0x01
 61c:	5a 81       	ldd	r21, Y+2	; 0x02
 61e:	6b 81       	ldd	r22, Y+3	; 0x03
 620:	7c 81       	ldd	r23, Y+4	; 0x04
 622:	40 31       	cpi	r20, 0x10	; 16
 624:	51 05       	cpc	r21, r1
 626:	61 05       	cpc	r22, r1
 628:	71 05       	cpc	r23, r1
 62a:	19 f0       	breq	.+6      	; 0x632 <mfrc522_request+0x52>
	{    
		status = ERROR;
 62c:	83 e0       	ldi	r24, 0x03	; 3
 62e:	01 c0       	rjmp	.+2      	; 0x632 <mfrc522_request+0x52>
 630:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
 632:	0f 90       	pop	r0
 634:	0f 90       	pop	r0
 636:	0f 90       	pop	r0
 638:	0f 90       	pop	r0
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	1f 91       	pop	r17
 640:	0f 91       	pop	r16
 642:	ff 90       	pop	r15
 644:	ef 90       	pop	r14
 646:	08 95       	ret

00000648 <mfrc522_get_card_serial>:

    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out) {
 648:	ef 92       	push	r14
 64a:	ff 92       	push	r15
 64c:	0f 93       	push	r16
 64e:	1f 93       	push	r17
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	00 d0       	rcall	.+0      	; 0x656 <mfrc522_get_card_serial+0xe>
 656:	00 d0       	rcall	.+0      	; 0x658 <mfrc522_get_card_serial+0x10>
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
 65c:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	8d e0       	ldi	r24, 0x0D	; 13
 662:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
 666:	83 e9       	ldi	r24, 0x93	; 147
 668:	f7 01       	movw	r30, r14
 66a:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
 66c:	80 e2       	ldi	r24, 0x20	; 32
 66e:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 670:	8e 01       	movw	r16, r28
 672:	0f 5f       	subi	r16, 0xFF	; 255
 674:	1f 4f       	sbci	r17, 0xFF	; 255
 676:	97 01       	movw	r18, r14
 678:	42 e0       	ldi	r20, 0x02	; 2
 67a:	b7 01       	movw	r22, r14
 67c:	8c e0       	ldi	r24, 0x0C	; 12
 67e:	0e 94 c1 01 	call	0x382	; 0x382 <mfrc522_to_card>

    if (status == CARD_FOUND)
 682:	81 30       	cpi	r24, 0x01	; 1
 684:	71 f4       	brne	.+28     	; 0x6a2 <mfrc522_get_card_serial+0x5a>
 686:	f7 01       	movw	r30, r14
 688:	a7 01       	movw	r20, r14
 68a:	4c 5f       	subi	r20, 0xFC	; 252
 68c:	5f 4f       	sbci	r21, 0xFF	; 255
 68e:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 690:	21 91       	ld	r18, Z+
 692:	92 27       	eor	r25, r18
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 694:	4e 17       	cp	r20, r30
 696:	5f 07       	cpc	r21, r31
 698:	d9 f7       	brne	.-10     	; 0x690 <mfrc522_get_card_serial+0x48>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 69a:	f7 01       	movw	r30, r14
 69c:	24 81       	ldd	r18, Z+4	; 0x04
 69e:	92 13       	cpse	r25, r18
		{   
			status = ERROR;    
 6a0:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	0f 91       	pop	r16
 6b2:	ff 90       	pop	r15
 6b4:	ef 90       	pop	r14
 6b6:	08 95       	ret

000006b8 <spi_init>:


#include "spi.h"

void spi_init() {
	SPI_DDR |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 6b8:	87 b3       	in	r24, 0x17	; 23
 6ba:	80 6b       	ori	r24, 0xB0	; 176
 6bc:	87 bb       	out	0x17, r24	; 23
	//
	DDRB &= ~(1<<SPI_MISO);	
 6be:	be 98       	cbi	0x17, 6	; 23
	SPSR &= ~(1<<SPI2X);
 6c0:	70 98       	cbi	0x0e, 0	; 14
	//
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);	//prescaler 16
 6c2:	8d b1       	in	r24, 0x0d	; 13
 6c4:	81 65       	ori	r24, 0x51	; 81
 6c6:	8d b9       	out	0x0d, r24	; 13
 6c8:	08 95       	ret

000006ca <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data) {
	SPDR = data;
 6ca:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 6cc:	77 9b       	sbis	0x0e, 7	; 14
 6ce:	fe cf       	rjmp	.-4      	; 0x6cc <spi_transmit+0x2>
	
	return SPDR;
 6d0:	8f b1       	in	r24, 0x0f	; 15
}
 6d2:	08 95       	ret

000006d4 <usart_init>:

#include "usart.h"
#define F_CPU 7372800UL

void usart_init(uint16_t baudRate) {
	if (baudRate != 2400 && baudRate != 4800 && baudRate != 9600) return;
 6d4:	80 36       	cpi	r24, 0x60	; 96
 6d6:	29 e0       	ldi	r18, 0x09	; 9
 6d8:	92 07       	cpc	r25, r18
 6da:	41 f0       	breq	.+16     	; 0x6ec <usart_init+0x18>
 6dc:	80 3c       	cpi	r24, 0xC0	; 192
 6de:	22 e1       	ldi	r18, 0x12	; 18
 6e0:	92 07       	cpc	r25, r18
 6e2:	21 f0       	breq	.+8      	; 0x6ec <usart_init+0x18>
 6e4:	80 38       	cpi	r24, 0x80	; 128
 6e6:	25 e2       	ldi	r18, 0x25	; 37
 6e8:	92 07       	cpc	r25, r18
 6ea:	11 f5       	brne	.+68     	; 0x730 <usart_init+0x5c>
	// calculate UBRR from baudRate
	uint16_t ubrr = ((F_CPU)/(16UL*baudRate)) - 1;
	UBRRH = (ubrr << 8);
 6ec:	10 bc       	out	0x20, r1	; 32
	UBRRL = ubrr;
 6ee:	a0 e0       	ldi	r26, 0x00	; 0
 6f0:	b0 e0       	ldi	r27, 0x00	; 0
 6f2:	88 0f       	add	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	aa 1f       	adc	r26, r26
 6f8:	bb 1f       	adc	r27, r27
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	aa 1f       	adc	r26, r26
 700:	bb 1f       	adc	r27, r27
 702:	9c 01       	movw	r18, r24
 704:	ad 01       	movw	r20, r26
 706:	22 0f       	add	r18, r18
 708:	33 1f       	adc	r19, r19
 70a:	44 1f       	adc	r20, r20
 70c:	55 1f       	adc	r21, r21
 70e:	22 0f       	add	r18, r18
 710:	33 1f       	adc	r19, r19
 712:	44 1f       	adc	r20, r20
 714:	55 1f       	adc	r21, r21
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	70 e8       	ldi	r23, 0x80	; 128
 71a:	80 e7       	ldi	r24, 0x70	; 112
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__udivmodsi4>
 722:	21 50       	subi	r18, 0x01	; 1
 724:	31 09       	sbc	r19, r1
 726:	29 b9       	out	0x09, r18	; 9
	
	// enable receive and transmit
	UCSRB = _BV(RXEN) | _BV(TXEN) | _BV(RXCIE);
 728:	88 e9       	ldi	r24, 0x98	; 152
 72a:	8a b9       	out	0x0a, r24	; 10
	
	// frame format: 8 data bits, 1 stop bit, no parity
	UCSRC = _BV(URSEL) | _BV(UCSZ0) | _BV(UCSZ1) ;
 72c:	86 e8       	ldi	r24, 0x86	; 134
 72e:	80 bd       	out	0x20, r24	; 32
 730:	08 95       	ret

00000732 <usart_putc>:
}

void usart_putc(const unsigned char data) {
	while ( !( UCSRA & _BV(UDRE)) );
 732:	5d 9b       	sbis	0x0b, 5	; 11
 734:	fe cf       	rjmp	.-4      	; 0x732 <usart_putc>
	UDR = data;
 736:	8c b9       	out	0x0c, r24	; 12
 738:	08 95       	ret

0000073a <usart_puts>:
}

void usart_puts(const char* data) {
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
 73e:	ec 01       	movw	r28, r24
	while(*data != 0x00){
 740:	88 81       	ld	r24, Y
 742:	88 23       	and	r24, r24
 744:	31 f0       	breq	.+12     	; 0x752 <usart_puts+0x18>
 746:	21 96       	adiw	r28, 0x01	; 1
		usart_putc(*data);
 748:	0e 94 99 03 	call	0x732	; 0x732 <usart_putc>
	while ( !( UCSRA & _BV(UDRE)) );
	UDR = data;
}

void usart_puts(const char* data) {
	while(*data != 0x00){
 74c:	89 91       	ld	r24, Y+
 74e:	81 11       	cpse	r24, r1
 750:	fb cf       	rjmp	.-10     	; 0x748 <usart_puts+0xe>
		usart_putc(*data);
		data++;
	}
}
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	08 95       	ret

00000758 <usart_hex>:

void usart_hex(uint8_t d) {
 758:	cf 93       	push	r28
 75a:	c8 2f       	mov	r28, r24
	char byte = '0';
	// send lower nibble as hex char
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
 75c:	82 95       	swap	r24
 75e:	8f 70       	andi	r24, 0x0F	; 15
 760:	28 2f       	mov	r18, r24
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	2a 30       	cpi	r18, 0x0A	; 10
 766:	31 05       	cpc	r19, r1
 768:	14 f4       	brge	.+4      	; 0x76e <usart_hex+0x16>
 76a:	80 5d       	subi	r24, 0xD0	; 208
 76c:	01 c0       	rjmp	.+2      	; 0x770 <usart_hex+0x18>
 76e:	89 5c       	subi	r24, 0xC9	; 201
	usart_putc(byte);
 770:	0e 94 99 03 	call	0x732	; 0x732 <usart_putc>
 774:	cf 70       	andi	r28, 0x0F	; 15
	// send higher nibble as hex char
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
 776:	8c 2f       	mov	r24, r28
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0a 97       	sbiw	r24, 0x0a	; 10
 77c:	1c f4       	brge	.+6      	; 0x784 <usart_hex+0x2c>
 77e:	80 e3       	ldi	r24, 0x30	; 48
 780:	8c 0f       	add	r24, r28
 782:	02 c0       	rjmp	.+4      	; 0x788 <usart_hex+0x30>
 784:	87 e3       	ldi	r24, 0x37	; 55
 786:	8c 0f       	add	r24, r28
	usart_putc(byte);
 788:	0e 94 99 03 	call	0x732	; 0x732 <usart_putc>
}
 78c:	cf 91       	pop	r28
 78e:	08 95       	ret

00000790 <delay>:
#define  F_CPU 7372800UL
#include <util/delay.h>
#include <avr/io.h>

void delay(int d) {
	for (int i = 0; i < d; ++i) {
 790:	18 16       	cp	r1, r24
 792:	19 06       	cpc	r1, r25
 794:	5c f4       	brge	.+22     	; 0x7ac <delay+0x1c>
 796:	20 e0       	ldi	r18, 0x00	; 0
 798:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 79a:	e3 e3       	ldi	r30, 0x33	; 51
 79c:	f7 e0       	ldi	r31, 0x07	; 7
 79e:	31 97       	sbiw	r30, 0x01	; 1
 7a0:	f1 f7       	brne	.-4      	; 0x79e <delay+0xe>
 7a2:	2f 5f       	subi	r18, 0xFF	; 255
 7a4:	3f 4f       	sbci	r19, 0xFF	; 255
 7a6:	82 17       	cp	r24, r18
 7a8:	93 07       	cpc	r25, r19
 7aa:	b9 f7       	brne	.-18     	; 0x79a <delay+0xa>
 7ac:	08 95       	ret

000007ae <debounce>:
 7ae:	2f ef       	ldi	r18, 0xFF	; 255
 7b0:	8f e5       	ldi	r24, 0x5F	; 95
 7b2:	93 e0       	ldi	r25, 0x03	; 3
 7b4:	21 50       	subi	r18, 0x01	; 1
 7b6:	80 40       	sbci	r24, 0x00	; 0
 7b8:	90 40       	sbci	r25, 0x00	; 0
 7ba:	e1 f7       	brne	.-8      	; 0x7b4 <debounce+0x6>
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <debounce+0x10>
 7be:	00 00       	nop
	}
}

void debounce() {
	_delay_ms(150);
	GIFR = _BV(INTF0) | _BV(INTF1);
 7c0:	80 ec       	ldi	r24, 0xC0	; 192
 7c2:	8a bf       	out	0x3a, r24	; 58
 7c4:	08 95       	ret

000007c6 <__udivmodsi4>:
 7c6:	a1 e2       	ldi	r26, 0x21	; 33
 7c8:	1a 2e       	mov	r1, r26
 7ca:	aa 1b       	sub	r26, r26
 7cc:	bb 1b       	sub	r27, r27
 7ce:	fd 01       	movw	r30, r26
 7d0:	0d c0       	rjmp	.+26     	; 0x7ec <__udivmodsi4_ep>

000007d2 <__udivmodsi4_loop>:
 7d2:	aa 1f       	adc	r26, r26
 7d4:	bb 1f       	adc	r27, r27
 7d6:	ee 1f       	adc	r30, r30
 7d8:	ff 1f       	adc	r31, r31
 7da:	a2 17       	cp	r26, r18
 7dc:	b3 07       	cpc	r27, r19
 7de:	e4 07       	cpc	r30, r20
 7e0:	f5 07       	cpc	r31, r21
 7e2:	20 f0       	brcs	.+8      	; 0x7ec <__udivmodsi4_ep>
 7e4:	a2 1b       	sub	r26, r18
 7e6:	b3 0b       	sbc	r27, r19
 7e8:	e4 0b       	sbc	r30, r20
 7ea:	f5 0b       	sbc	r31, r21

000007ec <__udivmodsi4_ep>:
 7ec:	66 1f       	adc	r22, r22
 7ee:	77 1f       	adc	r23, r23
 7f0:	88 1f       	adc	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	1a 94       	dec	r1
 7f6:	69 f7       	brne	.-38     	; 0x7d2 <__udivmodsi4_loop>
 7f8:	60 95       	com	r22
 7fa:	70 95       	com	r23
 7fc:	80 95       	com	r24
 7fe:	90 95       	com	r25
 800:	9b 01       	movw	r18, r22
 802:	ac 01       	movw	r20, r24
 804:	bd 01       	movw	r22, r26
 806:	cf 01       	movw	r24, r30
 808:	08 95       	ret

0000080a <_exit>:
 80a:	f8 94       	cli

0000080c <__stop_program>:
 80c:	ff cf       	rjmp	.-2      	; 0x80c <__stop_program>
